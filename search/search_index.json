{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#librarian","title":"Librarian","text":"<p>A tool to predict the sequencing library type from the base composition of a supplied FastQ file.</p> <p>Reads from high throughput sequencing experiments show base compositions that are characteristic for their library type. For example, data from RNA-seq and WGBS-seq libraries show markedly different distributions of G, A, C and T across the reads. Librarian makes use of different composition signatures to predict the library type of a given test sample by comparing it against previously published data sets from mouse and human.</p> <p>The input to Librarian is just a fastq file, the file which your sequencing provided will have given you.  If you have paired end sequencing where you have two fastq files per sample then you use the read1 file.</p> <p>To help assess the similarity to published data sets, Librarian produces several plots. The examples shown below are</p> sample library type sample 1 ATAC-Seq sample 2 RNA-Seq sample 3 Bisulfite(BS)-Seq"},{"location":"#compositions-map","title":"Compositions Map","text":"<p>UMAP representation of compositions of published sequencing data. Different library types are indicated by colours. Compositions of test libraries are projected onto the same manifold and indicated by light green circles.</p> <p></p>"},{"location":"#probability-maps","title":"Probability Maps","text":"<p>This collection of maps shows the probability of a particular region of the map to correspond to a certain library type. The darker the colour, the more dominated the region is by the indicated library type. The location of test libraries is indicated by a light blue circle.</p> <p></p>"},{"location":"#prediction-plot","title":"Prediction Plot","text":"<p>For each projected test library, the location on the Compositions/Probability Map is determined. This plot shows how published library types are represented at the same location.</p> <p></p>"},{"location":"#how-to-interpret","title":"How to interpret","text":"<p>Some regions on the map are very specific to a certain library type, others are more mixed. Therefore, for some test libraries the results will be much clearer than for others. The different plots are intended to provide a good overview of how similar the test library is to published data. The cause of any deviations should be inspected; the interpretation will be different depending on how characteristic the composition signature of the library type and how far off the projection of the test sample is.</p>"},{"location":"citation/","title":"Citation","text":""},{"location":"citation/#citation","title":"Citation","text":"<p>When using Librarian please consider citing</p>"},{"location":"citation/#_2","title":"Citation","text":"<p>Vashishtha K, Gaud C, Andrews S and Krueger C. Librarian: A quality control tool to analyse sequencing library compositions [version 1; peer review: 1 approved, 2 approved with reservations]. F1000Research 2022, 11:1122 (https://doi.org/10.12688/f1000research.125325.1)</p>"},{"location":"faqs/","title":"FAQs","text":""},{"location":"faqs/#q-my-sample-doesnt-come-up-as-the-library-type-that-i-expect-how-worried-do-i-need-to-be","title":"Q: My sample doesn't come up as the library type that I expect. How worried do I need to be?","text":"<p>It depends - there can be a number of reasons for this. It could of course be the case that something has gone wrong with the library preparation and the composition isn't what it should be. These are the cases that we want to catch with a QC tool. However, there may be a number of other scenarios in which the top predicition doesn't match the expected library type: </p> <ul> <li> <p>Several library types share simliar compostions. For example, RNA-Seq, ssRNA-Seq and RIP-seq have related input in terms of which parts of the genome they represent. This results in similar base compositions and makes it hard for Librarian to distinguish between them. Check the probability heatmap and see if the expected library type is for example the second most likely prediction.</p> </li> <li> <p>The reference data collected from published datasets is dominated by standard, commercially available library preparation kits. If you were using an unsual or custom library preparation, the base composition of your samples may differ from the ones that were used to build the model. For example: The reference data includes some samples which were tagged as RNA-seq but used tagmentation for library preparation. These group with ATAC-seq. If all your samples group with an unexpected library type it may be due to the specifics of library preparation.</p> </li> <li> <p>When samples are submitted to GEO only a limited list of library types are available to choose from. These are the types that we have included to build the model. If your sample doesn't match one of the indicated library types, Librarian cannot make a correct prediction.</p> </li> </ul>"},{"location":"faqs/#q-my-samples-isnt-from-human-or-mouse-can-i-still-use-librarian","title":"Q: My samples isn't from human or mouse. Can I still use Librarian?","text":"<p>A: We chose mouse and human samples to generate the database because of the abundance of published libraries and their similar genomic GC content. While we did not find biases between mouse and human, we found that the predictions were off when using samples from organisms with substantially different GC content. We therefore do not recommend using Librarian for other species apart from mouse or human although it seems likely that it would work for more closely related species with similar genomic GC content and biology.</p>"},{"location":"faqs/#q-can-librarian-be-used-for-non-illumina-sequencing-technologies","title":"Q: Can Librarian be used for non-Illumina sequencing technologies?","text":"<p>A: Librarian is specifically for Illumina samples. The composition biases which librarian uses won't work with data generated on other platforms.</p>"},{"location":"faqs/#q-when-i-use-the-librarian-web-app-will-i-have-to-upload-the-entire-fastq-file","title":"Q: When I use the Librarian web app, will I have to upload the entire FASTQ file?","text":"<p>A: No. Librarian will extract base compositions from a random selection of 100 000 reads. Only the compositions will be submitted to the web server.</p>"},{"location":"faqs/#q-i-have-paired-end-data-which-read-should-i-upload","title":"Q: I have paired-end data. Which read should I upload?","text":"<p>A: This depends on the library type. Consider the following questions: Is one of your reads and index read (e. g. read 1 in 10X scRNA-seq)? Don't use that one as it won't be informative. Will your reads be substantially different? For example, for standard ChIP-seq, both reads will be very similar, whereas for PBAT libraries they will be very different. The compositions reference database was constructed on read 1 for paired end data. Therefore, if none of your reads is an index read, stick with read 1. </p>"},{"location":"faqs/#q-do-you-collect-any-data-from-samples-submitted-to-the-web-app","title":"Q: Do you collect any data from samples submitted to the web app?","text":"<p>A: No.</p>"},{"location":"faqs/#q-does-it-matter-what-read-length-i-used-for-my-sequencing","title":"Q: Does it matter what read length I used for my sequencing?","text":"<p>A: Librarian requires at least a 50bp sequencing read to work.  If you have shorter reads than that then the program will not work.  It doesn't matter if you have longer reads,  but only the first 50bp of each read will be used for the analysis.</p>"},{"location":"faqs/#q-when-i-try-to-upload-a-file-to-web-app-fastqgz-files-are-greyed-out-shouldnt-this-work","title":"Q: When I try to upload a file to web app, fastq.gz files are greyed out. Shouldn't this work?","text":"<p>A: This seems to be an issue outside Librarian which we found happens on some Mac/browser combinations. Try drag &amp; dropping the file onto the upload button instead.</p>"},{"location":"installation/","title":"Installation","text":"<p>You don't need to install Librarian to use it - if you just have a few fastq files to test then you can simply vist the Online version of Librarian and select your fastq files to analyse.  No sequence data is sent to the server - only aggregated composition data, so your data stays on your machine.</p> <p>If you have a larger number of files to analyse then you will want to install the command line version of the program</p>"},{"location":"installation/#command-line-installation","title":"Command line installation","text":"<p>The command line version of librarian works on linux machines. We have provided pre-compiled binaries which should work on all 64-bit versions of linux and which should just work straight away.</p> <p>To install librarian go to the latest release on github and then download the <code>librarian.tar.gz</code> file. </p> <pre><code>wget --quiet https://github.com/DesmondWillowbrook/Librarian/releases/latest/download/librarian.tar.gz\n</code></pre> <p>Once you've downloaded the file you can uncompress it with:</p> <pre><code>tar -xzvf librarian.tar.gz\n</code></pre> <p>..which will produce something like:</p> <pre><code>librarian_v1.1/scripts/\nlibrarian_v1.1/scripts/Librarian_analysis.Rmd\nlibrarian_v1.1/scripts/.DS_Store\nlibrarian_v1.1/scripts/compositions_umap/\nlibrarian_v1.1/scripts/compositions_umap/20220623T170807Z-a8622/\nlibrarian_v1.1/scripts/compositions_umap/20220623T170807Z-a8622/data.txt\nlibrarian_v1.1/scripts/compositions_umap/20220623T170807Z-a8622/compositions_umap.rds\nlibrarian_v1.1/scripts/librarian_plotting_test_samples_server_220623.R\nlibrarian_v1.1/scripts/Librarian/\nlibrarian_v1.1/scripts/Librarian/test_library_composition_5.txt\nlibrarian_v1.1/scripts/Librarian/prediction_plot.svg\nlibrarian_v1.1/scripts/Librarian/compositions_map.svg\nlibrarian_v1.1/scripts/Librarian/probability_maps.png\nlibrarian_v1.1/scripts/Librarian/Librarian.Rproj\nlibrarian_v1.1/scripts/Librarian/.DS_Store\nlibrarian_v1.1/scripts/Librarian/.Rhistory\nlibrarian_v1.1/scripts/Librarian/librarian_heatmap.txt\nlibrarian_v1.1/scripts/Librarian/librarian_offline_analysis.R\nlibrarian_v1.1/scripts/Librarian/test_library_predictions.txt\nlibrarian_v1.1/scripts/Librarian/probability_maps.svg\nlibrarian_v1.1/scripts/Librarian/Librarian_offline_analysis.Rmd\nlibrarian_v1.1/scripts/Librarian/compositions_map.png\nlibrarian_v1.1/scripts/Librarian/prediction_plot.png\nlibrarian_v1.1/scripts/compositions_umap_results/\nlibrarian_v1.1/scripts/compositions_umap_results/20220623T170809Z-007ce/\nlibrarian_v1.1/scripts/compositions_umap_results/20220623T170809Z-007ce/data.txt\nlibrarian_v1.1/scripts/compositions_umap_results/20220623T170809Z-007ce/compositions_umap_results.rds\nlibrarian_v1.1/scripts/exec_analysis.sh\nlibrarian_v1.1/librarian\n</code></pre> <p>The main librarian program is <code>librarian_v1.1/librarian</code></p> <p>To test the program you can download some example data:</p> <p><code>wget --quiet https://www.bioinformatics.babraham.ac.uk/librarian/example_inputs/example_inputs.zip</code></p> <p>Which you can uncompress with:</p> <p><code>unzip example_inputs.zip</code></p> <p>..which will produce:</p> <pre><code>Archive:  example_inputs.zip\n   creating: example_inputs/\n  inflating: example_inputs/ATAC.example.fastq\n  inflating: example_inputs/RNA.example.fastq\n  inflating: example_inputs/bisulfite.example.fastq\n</code></pre> <p>So you now have three fastq files with which to test the program.  The example files here are uncompressed, but librarian works just fine with fastq.gz files.</p>"},{"location":"installation/#testing-a-remote-run","title":"Testing a remote run","text":"<p>At this point you should be able to run the command line program by submitting your composition data to the librarian server for analysis</p> <p>You can do this by running:</p> <pre><code>librarian_v1.1/librarian example_inputs/*fastq\n</code></pre> <p>Which should produce:</p> <pre><code>INFO [librarian] Processing \"example_inputs/ATAC.example.fastq\"\nINFO [librarian] Processing \"example_inputs/bisulfite.example.fastq\"\nINFO [librarian] Processing \"example_inputs/RNA.example.fastq\"\nINFO [librarian] Sending data to server at https://www.bioinformatics.babraham.ac.uk/librarian/api/plot_comp\nINFO [librarian] Requests may take up to 5 minutes to process.\nINFO [librarian] Created \"librarian_compositions_map.svg\"\nINFO [librarian] Created \"librarian_compositions_map.png\"\nINFO [librarian] Created \"librarian_probability_maps.svg\"\nINFO [librarian] Created \"librarian_probability_maps.png\"\nINFO [librarian] Created \"librarian_prediction_plot.svg\"\nINFO [librarian] Created \"librarian_prediction_plot.png\"\nINFO [librarian] Created \"librarian_librarian_heatmap.txt\"\nINFO [librarian] Created \"librarian_Librarian_analysis.html\"\n</code></pre> <p>..and you can look at the files produced to check that the analysis completed successfully.</p>"},{"location":"installation/#running-in-local-mode","title":"Running in local mode","text":"<p>The example above submitted the composition data to the librarian server to perform the predictions.  If you are going to be analysing a larger number of files then you will want to run the prediction locally.  This uses the same command line installation, but also requires a local version of R be available.</p> <p>To run in local mode you must install a recent version of R.  There are serveral ways to do this but here is one simple option</p> <p>You can check that R is correctly installed by running:</p> <p><code>Rscript --version</code></p> <p>If you see something like:</p> <pre><code>Rscript --version\nR scripting front-end version 4.1.1 (2021-08-10)\n</code></pre> <p>Then you're all good.  Before you run librarian you will also need to install some additional R packages.  To do this you can open an R session and run:</p> <pre><code>install.packages(c(\"pins\",\"tidyverse\",\"umap\",\"ggrastr\"))\n</code></pre> <p>Once this completes successfully then you can run librarian in local mode.</p>"},{"location":"installation/#running-in-local-mode_1","title":"Running in local mode","text":"<p>To run in local mode you do the same as before but add the <code>--local</code> flag to your command.</p> <pre><code>librarian_v1.1/librarian --local example_inputs/*fastq\n</code></pre> <p>..which produces:</p> <pre><code>INFO [librarian] Processing \"example_inputs/ATAC.example.fastq\"\nINFO [librarian] Processing \"example_inputs/bisulfite.example.fastq\"\nINFO [librarian] Processing \"example_inputs/RNA.example.fastq\"\nINFO [librarian] Created \"librarian_compositions_map.svg\"\nINFO [librarian] Created \"librarian_compositions_map.png\"\nINFO [librarian] Created \"librarian_probability_maps.svg\"\nINFO [librarian] Created \"librarian_probability_maps.png\"\nINFO [librarian] Created \"librarian_prediction_plot.svg\"\nINFO [librarian] Created \"librarian_prediction_plot.png\"\nINFO [librarian] Created \"librarian_librarian_heatmap.txt\"\nINFO [librarian] Created \"librarian_Librarian_analysis.html\"\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Librarian can be used in one of the following three ways:</p>"},{"location":"usage/#librarian-web-app","title":"Librarian web app","text":"<p>Try out the Librarian Online tool!</p> <p>This is particularly useful if you only have a handful of libraries to test, only want to have a look or don't want to install anything. </p> <p>Simply select one or more fastq or fastq.gz files from your computer and view or download the Librarian plots. </p>"},{"location":"usage/#librarian-cli","title":"Librarian CLI","text":"<p>You can install Librarian on your own system from here as a Docker or non-Docker setup.</p> <p>Librarian CLI can be run in the following modes:</p>"},{"location":"usage/#web-server-query","title":"Web server query","text":"<p>Base compositions are sent to the web server and output is sent back. This setup requires internet access but has no R dependencies. Using the remote option ensures that samples are compared to the latest reference data model.</p>"},{"location":"usage/#local-offline","title":"Local (offline)","text":"<p>The reference data model is stored with Librarian, visualisations and predictions are computed locally. This setup has R depenencies, but no internet access is required.</p> <p>Please report any bugs to Github Issues.</p>"},{"location":"cli/","title":"Librarian Query CLI","text":"<p>Queries the Babraham server (or your own!) with supplied FASTQ files and downloads plots.</p> <pre><code>Librarian CLI 1.3.0\nA tool to predict the sequencing library type from the base composition of a supplied FastQ file. Uncompresses .gz files\nwhen reading.\n\nUSAGE:\n    librarian [FLAGS] [OPTIONS] &lt;input&gt;...\n\nFLAGS:\n    -h, --help       \n            Prints help information\n\n    -l, --local      \n            Run all processing locally, replacing the need for a server. Requires Rscript and other dependencies to be\n            installed, along with the `scripts` folder. See\n            https://github.com/DesmondWillowbrook/Librarian/blob/master/cli/README.md for more details.\n\n            This cannot be set together with `--api`.\n    -q, --quiet      \n            Suppresses all output except errors\n\n        --raw        \n            Only output the librarian_heatmap.txt file used by MultiQC, and don't output any plots.\n\n            This option requires `local` to be set.\n    -V, --version    \n            Prints version information\n\n\nOPTIONS:\n        --api &lt;api&gt;                  \n            Specifies query URL to send prediction request to. Defaults to Babraham Bioinformatic's server. Passed\n            argument is given precedence over environment variable.\n\n            This cannot be set together with `--local`. [env: LIBRARIAN_API_URL=]  [default:\n            https://www.bioinformatics.babraham.ac.uk/librarian/api/plot_comp]\n    -o, --output-dir &lt;output-dir&gt;    \n            Output directory (eg. `output_dir/`) [default: ]\n\n\nARGS:\n    &lt;input&gt;...    \n            List of input files\n</code></pre>"},{"location":"cli/#installation","title":"Installation","text":"<p>CLI binaries can be found in the Github Releases section of the repository.</p> <p>The released binaries are statically linked with <code>musl</code>, so there shouldn't be too much in the way of system requirements for the CLI except running Linux.</p> <p>Running with the <code>--local</code> option requires additional dependencies to be installed. Refer to the server README's Runtime Dependencies section for a list of the other dependencies. (The CLI tar file includes a copy of the <code>scripts</code> folder beside the binary)</p> <p>You might find it useful to refer to the CLI dockerfile for a list of dependencies.</p>"},{"location":"cli/#install-from-source","title":"Install from source","text":"<p>Requires a recent version of the Rust toolchain. </p> <pre><code>cargo install --git \"https://github.com/DesmondWillowbrook/Librarian/\" cli\n</code></pre>"},{"location":"cli/#querying-another-server","title":"Querying another server","text":"<pre><code>librarian example.fastq.gz --api http://127.0.0.1:8186/api/plot_comp\n</code></pre> <p>To debug the client:</p> <pre><code>(\nexport LIBRARIAN_API_URL=http://127.0.0.1:8186/api/plot_comp\nexport RUST_LOG=trace # other values are `debug`, `info`, `warn` and `error` - default is `info`\ncargo run --release --bin librarian -- ../frontend/example_inputs/example_inputs/*\n)\n</code></pre>"},{"location":"server/","title":"Server","text":"<p>Serves the webpages in <code>frontend/dist</code> along with running backend services.</p>"},{"location":"server/#installation","title":"Installation","text":""},{"location":"server/#build-dependencies","title":"Build dependencies","text":"<ul> <li><code>npm</code></li> <li><code>Rust (with Cargo)</code> </li> <li><code>wasm-pack</code></li> </ul>"},{"location":"server/#runtime-dependencies","title":"Runtime dependencies","text":"<p>The <code>scripts</code> folder included with the binary should be in the same directory as the binary. <code>Rscript</code> should be present in $PATH.</p> <pre><code>apt-get install -y r-base-core r-base-dev libssl-dev libcurl4-openssl-dev libxml2-dev\nRscript -e 'install.packages(c(\"tidyverse\", \"umap\", \"ggrastr\", \"pins\", \"rmarkdown\"))'\n</code></pre>"},{"location":"server/#building-from-source","title":"Building from source","text":"<pre><code>git clone https://github.com/DesmondWillowbrook/Librarian.git\ncd Librarian\n./run-server.sh\n</code></pre> <p>Alternatively, in case you haven't made any changes to the frontend, you can just run the server binary without rebuilding the frontend website.</p> <pre><code>cd server\ncargo run --release\n</code></pre>"},{"location":"server/#environment-variables","title":"Environment Variables:","text":"<ul> <li><code>LIBRARIAN_PORT</code> (defaults to 8186): port to listen to.</li> <li><code>LIBRARIAN_INDEX_PATH</code> (defaults to <code>../frontend/dist</code>): path to directory to serve (the one with <code>index.html</code>).</li> <li><code>LIBRARIAN_EXAMPLE_PATH</code> (defaults to <code>../frontend/example_inputs</code>): path to example input files.</li> </ul>"},{"location":"server/#debugging","title":"Debugging","text":"<pre><code>RUST_LOG=trace cargo run --release\n</code></pre> <p>NOTE: Setting <code>RUST_LOG</code> to <code>trace</code> will cause the server to not delete temporary directories after use. This is useful for debugging purposes.</p>"}]}